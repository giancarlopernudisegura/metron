// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

model Course {
	id                  String              @id @default(cuid())
	name                String              @unique @default("")
	assignments         Assignment[]
	teachingStaff       TeachingStaff[]
	students            Student[]

	@@index(name)
}

model User {
	email               String              @id
	isAdmin             Boolean             @default(false)
	assignmentsEnrolled Student[]
	assignmentsAssigned TeachingStaff[]
	solutions           Solution[]
}

model Assignment {
	id                  String              @id @default(cuid())
	course              Course              @relation(fields: [courseId], references: [id])
	name                String
	description         String
	dateDue             DateTime            @default(now())
	testCases           TestCase[]
	solutions           Solution[]

	courseId            String
}

model TeachingStaff {
	user                User               @relation(fields: [userEmail], references: [email])
	course              Course             @relation(fields: [courseId], references: [id])

	userEmail           String
	courseId            String

	@@unique([courseId, userEmail])
	@@index([courseId, userEmail])
}

model Student {
	user                User               @relation(fields: [userEmail], references: [email])
	course              Course             @relation(fields: [courseId], references: [id])

	userEmail           String
	courseId            String

	@@unique([courseId, userEmail])
	@@index([courseId, userEmail])
}

model TestCase {
	id                  String              @id @default(cuid())
	assignment          Assignment          @relation(fields: [assignmentId], references: [id])
	cmdFormat           String
	solution            String
	runs                RunCase[]

	assignmentId        String
}

model RunCase {
	cmd                 String              @unique
	stdout              String
	success             Boolean
	lastRun             DateTime            @default(now())
	testCase            TestCase            @relation(fields: [testCaseId], references: [id])

	testCaseId          String
}

model Solution {
	fileName            String              @id @default(cuid())
	owner               User                @relation(fields: [ownerId], references: [email])
	assignment          Assignment          @relation(fields: [assignmentId], references: [id])

	ownerId             String
	assignmentId        String
}
